{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The Bathroom App Version 0.4",
  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "systemadminname" : {
      "NoEcho": "false",
      "Description" : "The admin user's First and Last name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    "systemadminemailaddress" : {
      "NoEcho": "false",
      "Description" : "The admin user email address",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "40",
      "ConstraintDescription" : "Your email address for logins and notifications."
    },
    "AdminPassword" : {
      "NoEcho": "true",
      "Description" : "The admin user account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "alexafunctionregion" : {
      "NoEcho": "false",
      "Description" : "Region for the Alexa Lambda function.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "20",
      "ConstraintDescription" : "Please choose from Amazon regions supporting Lambda"
    },
    "rootdomain" : {
      "NoEcho": "false",
      "Description" : "Domain for the system",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "40",
      "ConstraintDescription" : "A domain that you own."
    },
    "nameofbathroomstatussystem" : {
      "NoEcho": "false",
      "Description" : "Name for the system",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "20",
      "ConstraintDescription" : "A name that you like."
    }


  },

  "Resources": {

    "tablestudygurubathrooms": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "unique_id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "unique_id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "1",
          "WriteCapacityUnits": "1"
        }
      }
    },

    "tablestudygurubathroomsconfig": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "current_config",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "current_config",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "1",
          "WriteCapacityUnits": "1"
        }
      }
    },

    "s3awsbathroomappfiles": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "Tags": [
          {
            "Key": "project",
            "Value": "the bathroom app"
          },
          {
            "Key": "provisioned by",
            "Value": "initial setup using CloudFormation"
          }
        ]        
      }
    },

    "s3awsbathroomappwebsitebucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "Authorization"
              ],
              "AllowedMethods": [
                "GET"
              ],
              "AllowedOrigins": [
                "*"
              ],
              "MaxAge": "3000"
            }
          ]
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "Tags": [
          {
            "Key": "project",
            "Value": "the bathroom app"
          },
          {
            "Key": "provisioned by",
            "Value": "initial setup using CloudFormation"
          }
        ]
      }
    },

    "adminTopicEmailListforNotifications": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "AdminEmailListforBathroomAppNotifications",
        "Subscription": [
          {
            "Endpoint": {"Ref": "systemadminemailaddress"},
            "Protocol": "email"
          }
        ]
      }
    },

    "snspolicyAdrianEmailListforNotifications": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "Topics": [
          {
            "Ref": "adminTopicEmailListforNotifications"
          }
        ],
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Id": "__default_policy_ID",
          "Statement": [
            {
              "Sid": "__default_statement_ID",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "SNS:GetTopicAttributes",
                "SNS:SetTopicAttributes",
                "SNS:AddPermission",
                "SNS:RemovePermission",
                "SNS:DeleteTopic",
                "SNS:Subscribe",
                "SNS:ListSubscriptionsByTopic",
                "SNS:Publish",
                "SNS:Receive"
              ],
              "Resource": {
                "Ref": "adminTopicEmailListforNotifications"
              }
            }
          ]
        }
      }
    },

    "bathroomappgetstatuslambdafunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Handler": "index.handler",
            "MemorySize": "128",
            "FunctionName": "bathroomappgetstatuslambdafunction",
            "Role": { "Fn::GetAtt" : ["bathroomappgetstatuslambdarole", "Arn"] },
             "Code": {
                  "ZipFile": { "Fn::Join": ["\n", [
                      "exports.adrian = (event, context, callback) => ",
                      "{callback(null, 'Hello from Lambda');};"]
                 ]}
             },
            "Runtime": "nodejs4.3",
            "Timeout": "10"
          }
    },

    "bathroomappgetstatuslambdarole":{
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": 
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Sid":"testpolicy",
                "Effect": "Allow",
                "Action": ["sts:AssumeRole"],
                "Principal": {
                  "Service": ["lambda.amazonaws.com","ec2.amazonaws.com"]
                }
              }]
            },
        "RoleName": "bathroomappgetstatuslambdarole"
      }
    },

    "bathroomappgetstatuslambdapolicy": {
      "DependsOn":"bathroomappgetstatuslambdarole",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Action": [
              "*"
            ],
            "Resource": "*"
          }]
        },
        "PolicyName": "bathroomappgetstatuslambdapolicy",
        "Roles":["bathroomappgetstatuslambdarole"]
      }
    },

    "bathroomappsetstatuslambdafunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Handler": "index.handler",
            "MemorySize": "128",
            "FunctionName": "bathroomappsetstatuslambdafunction",
            "Role": { "Fn::GetAtt" : ["bathroomappsuperrole", "Arn"] },
              "Code": {
                "ZipFile": { "Fn::Join": ["\n", [
                    "import json",
                    "def handler(event, context):",
                    "    lambdaRetVal = {\"Hello\":\"World\"}",
                    "    return json.dumps(lambdaRetVal)"]
                ]}
              },
            "Runtime": "python3.6",
            "Timeout": "10"
          }
    },

    "bathroomappalexalambdafunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Handler": "index.handler",
            "MemorySize": "128",
            "FunctionName": "bathroomappalexalambdafunction",
            "Role": { "Fn::GetAtt" : ["bathroomappsuperrole", "Arn"] },
              "Code": {
                "ZipFile": { "Fn::Join": ["\n", [
                    "import json",
                    "def handler(event, context):",
                    "    lambdaRetVal = {\"Hello\":\"World\"}",
                    "    return json.dumps(lambdaRetVal)"]
                ]}
              },
            "Runtime": "python3.6",
            "Timeout": "10"
          }
    },

    "bathroomappsyncdyanomoands3lambdafunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Handler": "index.handler",
            "MemorySize": "128",
            "FunctionName": "bathroomappsyncdyanomoands3lambdafunction",
            "Role": { "Fn::GetAtt" : ["bathroomappsuperrole", "Arn"] },
              "Code": {
                "ZipFile": { "Fn::Join": ["\n", [
                    "import json",
                    "def handler(event, context):",
                    "    lambdaRetVal = {\"Hello\":\"World\"}",
                    "    return json.dumps(lambdaRetVal)"]
                ]}
              },
            "Runtime": "python3.6",
            "Timeout": "20"
          }
    },

    "bathroomappkickstartconfiglambdafunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Handler": "index.handler",
            "MemorySize": "1024",
            "FunctionName": "bathroomappkickstartconfiglambdafunction",
            "Role": { "Fn::GetAtt" : ["bathroomappsuperrole", "Arn"] },
              "Code": {
                "ZipFile": { "Fn::Join": ["\n", [
                    "import json",
                    "def handler(event, context):",
                    "    lambdaRetVal = {\"Hello\":\"World\"}",
                    "    return json.dumps(lambdaRetVal)"]
                ]}
              },
            "Runtime": "python3.6",
            "Timeout": "300",
            "Tags": [
              {
                "Key" : "asset_purpose",
                "Value" : "kick start system using config file"
              },
              {
                "Key" : "my_cf_stack_id",
                "Value" : {"Ref": "AWS::StackId"}
              },
              {
                "Key" : "my_cf_stack_name",
                "Value" : {"Ref": "AWS::StackName"}
              }
            ]
          }
    },

    "bathroomappcreatepopulatedynamodblambdafunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Handler": "index.handler",
            "MemorySize": "128",
            "FunctionName": "bathroomappcreatepopulatedynamodblambdafunction",
            "Role": { "Fn::GetAtt" : ["bathroomappsuperrole", "Arn"] },
              "Code": {
                "ZipFile": { "Fn::Join": ["\n", [
                    "import json",
                    "def handler(event, context):",
                    "    lambdaRetVal = {\"Hello\":\"World\"}",
                    "    return json.dumps(lambdaRetVal)"]
                ]}
              },
            "Runtime": "python2.7",
            "Timeout": "200",
            "Tags": [
              {
                "Key" : "asset_purpose",
                "Value" : "populate existing dynamoDB database"
              },
              {
                "Key" : "my_cf_stack_id",
                "Value" : {"Ref": "AWS::StackId"}
              },
              {
                "Key" : "my_cf_stack_name",
                "Value" : {"Ref": "AWS::StackName"}
              }
            ]
          }
    },

    "bathroomappsuperrole":{
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": 
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Sid":"testpolicy",
                "Effect": "Allow",
                "Action": ["sts:AssumeRole"],
                "Principal": {
                  "Service": ["lambda.amazonaws.com","ec2.amazonaws.com"]
                }
              }]
            },
        "RoleName": "bathroomappsuperrole"
      }
    },

    "bathroomappsuperpolicy": {
      "DependsOn":"bathroomappgetstatuslambdarole",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Action": [
              "*",
              "logs:CreateLogGroup"
            ],
            "Resource": "*"
          }]
        },
        "PolicyName": "bathroomappsuperpolicy",
        "Roles":["bathroomappsuperrole"]
      }
    },


    "vpce5a89282": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": "TheBathroomAppVPC"
          },
          {
            "Key": "AutoTag_Creator",
            "Value": "arn:aws:iam::101845606311:user/adrianadmin"
          }
        ]
      }
    },

    "subnet3687ee7f": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": "us-west-2a",
        "VpcId": {
          "Ref": "vpce5a89282"
        },
        "Tags": [
          {
            "Key": "AutoTag_Creator",
            "Value": "arn:aws:iam::101845606311:user/adrianadmin"
          },
          {
            "Key": "Name",
            "Value": "TheBathroomAppSubnet"
          }
        ]
      }
    },

    "igw0e788669": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "AutoTag_Creator",
            "Value": "arn:aws:iam::101845606311:user/adrianadmin"
          }
        ]
      }
    },

    "dopt3c2b315e": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "us-west-2.compute.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },

    "acleb18e18d": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "vpce5a89282"
        }
      }
    },

    "rtbd553e5b3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpce5a89282"
        }
      }
    },


    "bathroomAppConfigEC2InstanceProfile":{
      "DependsOn":"bathroomappsuperrole",
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Roles": [
            {"Ref":"bathroomappsuperrole"}
          ]
       }
    },      


    "bathroomAppConfigEC2Instance": {      
      "Type": "AWS::EC2::Instance",
      "DependsOn":"bathroomappsuperrole",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "IamInstanceProfile": {"Ref":"bathroomAppConfigEC2InstanceProfile"},
        "ImageId": "ami-4836a428",
        "InstanceType": "t2.medium",
        "KeyName": { "Ref" : "KeyName" },
        "UserData": 
          { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "# Install git and software repo before running setup\n",
          "yum -y install git\n",
          "cd /home/ec2-user\n",
          "git clone https://github.com/drumadrian/aws-bathroom-status-app.git\n",
          "bash aws-bathroom-status-app/deploy/configureBathroomAppConfigInstance.bash\n"
        ]]}},
        "Monitoring": "true",
        "Tags": [
          {
            "Key": "projectName",
            "Value": "TheBathroomApp"
          },
          {
            "Key": "AutoTag_Creator",
            "Value": "arn:aws:iam::101845606311:user/adrianadmin"
          },
          {
            "Key": "version",
            "Value": "1.0"
          },
          {
            "Key": "Name",
            "Value": "TheBathroomAppConfigEC2Instance"
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "subnet3687ee7f"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.0.102",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgTheBathroomAppEC2SecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
      }
    },

    "sgTheBathroomAppEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "The Bathroom App EC2 Security Group for config and build server",
        "VpcId": {
          "Ref": "vpce5a89282"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "TheBathroomAppEC2SecurityGroup"
          }
        ]
      }
    },

    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "acleb18e18d"
        }
      }
    },

    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "acleb18e18d"
        }
      }
    },

    "subnetacl1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "acleb18e18d"
        },
        "SubnetId": {
          "Ref": "subnet3687ee7f"
        }
      }
    },

    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "vpce5a89282"
        },
        "InternetGatewayId": {
          "Ref": "igw0e788669"
        }
      }
    },

    "subnetroute1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "rtbd553e5b3"
        },
        "SubnetId": {
          "Ref": "subnet3687ee7f"
        }
      }
    },

    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "rtbd553e5b3"
        },
        "GatewayId": {
          "Ref": "igw0e788669"
        }
      },
      "DependsOn": "gw1"
    },

    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "vpce5a89282"
        },
        "DhcpOptionsId": {
          "Ref": "dopt3c2b315e"
        }
      }
    },

    "ingress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgTheBathroomAppEC2SecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "174.65.133.169/32"
      }
    },

    "egress1": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgTheBathroomAppEC2SecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },





    "BathroomAppAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "BathroomAppAPI",
        "Description": "API used for the Bathroom App System",
        "FailOnWarnings": true,
        "Body": {
          "swagger": "2.0",
          "info": {
            "version": "2016-08-17T18:08:34Z",
            "title": "BathroomAppAPI"
          },
          "basePath": "/LATEST",
          "schemes": ["https"],
          "paths": {
            "/greeting": {
              "get": {
                "parameters": [{
                  "name": "name",
                  "in": "query",
                  "required": false,
                  "type": "string"
                }],
                "produces": ["application/json"],
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "requestTemplates": {
                    "application/json": "{\"name\": \"$input.params('name')\"}"
                  },
                  "uri": {"Fn::Join": ["",
                    ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["bathroomappgetstatuslambdafunction", "Arn"]}, "/invocations"]
                  ]},
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "httpMethod": "POST",
                  "type": "aws"
                }
              }
            }
          }
        }
      }
    },

    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["bathroomappgetstatuslambdafunction", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["",
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "BathroomAppAPI"}, "/*"]
        ]}
      }
    },

    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["bathroomappsetstatuslambdafunction", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["",
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "BathroomAppAPI"}, "/*"]
        ]}
      }
    },


    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["apigateway.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": "ApiGatewayLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {"Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"] }
      }
    },

    "BathroomAppAPIStage": {
      "DependsOn": ["ApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "BathroomAppAPI"},
        "StageName": "LATEST"
      }
    },

    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {"Ref": "BathroomAppAPI"},
        "StageName": "ProductionStage"
      }
    }


  },

  "Outputs": {

    "cfoutputbathroomappalexalambdafunctionarn": {
      "Description": "ARN of the bathroom app alexa lambda function",
      "Value": { "Fn::GetAtt" : ["bathroomappalexalambdafunction", "Arn"] },
      "Export" : {
        "Name": "cfoutputbathroomappalexalambdafunctionarn"
      }
    },
    "cfoutputbathroomappgetstatuslambdafunctionarn": {
      "Description": "ARN of the bathroom app getstatus lambda function",
      "Value": { "Fn::GetAtt" : ["bathroomappgetstatuslambdafunction", "Arn"] },
      "Export" : {
        "Name": "cfoutputbathroomappgetstatuslambdafunctionarn"
      }
    },
    "cfoutputbathroomappsetstatuslambdafunctionarn": {
      "Description": "ARN of the bathroom app setstatus lambda function",
      "Value": { "Fn::GetAtt" : ["bathroomappsetstatuslambdafunction", "Arn"] },
      "Export" : {
        "Name": "cfoutputbathroomappsetstatuslambdafunctionarn"
      }
    },
    "cfoutputbathroomappsyncdyanomoands3lambdafunctionarn": {
      "Description": "ARN of the bathroom app sync dyanomo and s3 lambda function",
      "Value": { "Fn::GetAtt" : ["bathroomappsyncdyanomoands3lambdafunction", "Arn"] },
      "Export" : {
        "Name": "cfoutputbathroomappsyncdyanomoands3lambdafunctionarn"
      }
    },
    "cfoutputBathroomAppAPIiD": {
      "Description": "ID of the bathroom app API Gateway REST API",
      "Value": {"Ref": "BathroomAppAPI"},
      "Export" : {
        "Name": "cfoutputBathroomAppAPIiD"
      }
    },
    "APIRootUrl": {
      "Description": "Root URL of the API gateway REST API",
      "Value": {"Fn::Join": ["",
        ["https://", {"Ref": "BathroomAppAPI"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com"]]},
      "Export" : {
        "Name": "APIRootUrl"
      }
    },
    "cfoutputadminTopicEmailListforNotificationsarn": {
      "Description": "ARN of the SNS admin Topic Email List for Notifications",
      "Value": {"Ref": "adminTopicEmailListforNotifications"},
      "Export" : {
        "Name": "cfoutputadminTopicEmailListforNotificationsarn"
      }
    },
    "cfoutputbathroomappsuperpolicyarn": {
      "Description": "ARN of the bathroom app superpolicy",
      "Value": {"Ref": "bathroomappsuperpolicy"},
      "Export" : {
        "Name": "cfoutputbathroomappsuperpolicyarn"
      }
    },
    "cfoutputbathroomappsuperrolearn": {
      "Description": "ARN of the bathroom app super role",
      "Value": { "Fn::GetAtt" : ["bathroomappsuperrole", "Arn"] },
      "Export" : {
        "Name": "cfoutputbathroomappsuperrolearn"
      }
    },
    "cfoutputs3awsbathroomappfilesarn": {
      "Description": "ARN of the bathroom app config file bucket",
      "Value": { "Fn::GetAtt" : ["s3awsbathroomappfiles", "Arn"] },
      "Export" : {
        "Name": "cfoutputs3awsbathroomappfilesarn"
      }
    },
    "cfoutputs3awsbathroomappwebsitebucketarn": {
      "Description": "ARN of the bathroom app website bucket",
      "Value": { "Fn::GetAtt" : ["s3awsbathroomappwebsitebucket", "Arn"] },
      "Export" : {
        "Name": "cfoutputs3awsbathroomappwebsitebucketarn"
      }
    },
    "cfoutputtablestudygurubathroomsname": {
      "Description": "Name of the DynamoDB bathrooms database",
      "Value": {"Ref": "tablestudygurubathrooms"},
      "Export" : {
        "Name": "cfoutputtablestudygurubathroomsname"
      }
    },
    "cfoutputtablestudygurubathroomsconfigarn": {
      "Description": "ARN of the DynamoDB config database",
      "Value": {"Ref": "tablestudygurubathroomsconfig"},
      "Export" : {
        "Name": "cfoutputtablestudygurubathroomsconfigarn"
      }
    },

    "cfoutputsystemadminname": {
      "Description": "First and Last Name of the system admin",
      "Value": {"Ref": "systemadminname"},
      "Export" : {
        "Name": "cfoutputsystemadminname"
      }
    },
    "cfoutputsystemadminemailaddress": {
      "Description": "email address of the system admin",
      "Value": {"Ref": "systemadminemailaddress"},
      "Export" : {
        "Name": "cfoutputsystemadminemailaddress"
      }
    },
    "cfoutputalexafunctionregion": {
      "Description": "alexa function region",
      "Value": {"Ref": "alexafunctionregion"},
      "Export" : {
        "Name": "cfoutputalexafunctionregion"
      }
    },
    "cfoutputrootdomain": {
      "Description": "root domain for the system",
      "Value": {"Ref": "rootdomain"},
      "Export" : {
        "Name": "cfoutputrootdomain"
      }
    },
    "cfoutputnameofbathroomstatussystem": {
      "Description": "Name of bathroom status system",
      "Value": {"Ref": "nameofbathroomstatussystem"},
      "Export" : {
        "Name": "cfoutputnameofbathroomstatussystem"
      }
    },
    "cfoutputs3awsbathroomappfiles": {
      "Description": "aws s3 config file bucket name",
      "Value": {"Ref": "s3awsbathroomappfiles"},
      "Export" : {
        "Name": "cfoutputs3awsbathroomappfiles"
      }
    },
    "cfoutputs3awsbathroomappwebsitebucket": {
      "Description": "aws s3 website file bucket name",
      "Value": {"Ref": "s3awsbathroomappwebsitebucket"},
      "Export" : {
        "Name": "cfoutputs3awsbathroomappwebsitebucket"
      }
    },
    "cfoutputsbathroomappcreatepopulatedynamodblambdafunction": {
      "Description": "lambda function to populate dynamoDB",
      "Value": { "Fn::GetAtt" : ["bathroomappcreatepopulatedynamodblambdafunction", "Arn"] },
      "Export" : {
        "Name": "cfoutputsbathroomappcreatepopulatedynamodblambdafunction"
      }
    },

    
  }   

}

